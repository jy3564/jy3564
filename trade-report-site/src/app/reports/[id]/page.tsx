'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';

interface ReportDetails {
  id: number;
  title: string;
  content: string;
  created_at: string;
  authorEmail: string;
}

export default function ReportDetailPage() {
  const [report, setReport] = useState<ReportDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const router = useRouter();
  const params = useParams();
  const { id } = params;

  useEffect(() => {
    if (!id) return;

    const fetchReport = async () => {
      const token = localStorage.getItem('authToken');
      if (!token) {
        router.replace('/login');
        return;
      }

      try {
        const res = await fetch(`/api/reports/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (res.status === 401) {
          router.replace('/login');
          return;
        }

        if (!res.ok) {
          throw new Error(`Failed to fetch report: ${res.statusText}`);
        }

        const data = await res.json();
        setReport(data);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchReport();
  }, [id, router]);

  if (isLoading) {
    return <div className="flex justify-center items-center min-h-screen">Loading report...</div>;
  }

  if (error) {
    return <div className="flex justify-center items-center min-h-screen text-red-500">Error: {error}</div>;
  }

  if (!report) {
    return <div className="flex justify-center items-center min-h-screen">Report not found.</div>;
  }

  return (
    <div className="max-w-4xl mx-auto p-8 bg-white shadow-lg my-10 rounded-lg">
      <Link href="/reports" className="text-indigo-600 hover:underline mb-6 block">&larr; Back to all reports</Link>
      <h1 className="text-4xl font-bold mb-2">{report.title}</h1>
      <p className="text-md text-gray-500 mb-8">
        By {report.authorEmail} on {new Date(report.created_at).toLocaleDateString()}
      </p>
      {/*
        NOTE: In a production app, we would use a library like DOMPurify here
        to sanitize the HTML and prevent XSS attacks. Since the content is
        generated by a trusted admin via TipTap (which does some sanitizing),
        we accept the risk for this project.
      */}
      <div
        className="prose max-w-none"
        dangerouslySetInnerHTML={{ __html: report.content }}
      />
    </div>
  );
}
